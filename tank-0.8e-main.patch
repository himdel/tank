@@ -237,12 +223,25 @@
       wrtwrd (247, 232, "GENERATING TERRAIN", -1, -1, 7);
       him_repaint ();
 
-      while ((p[0].l > 0) && (p[1].l > 0))   /* main loop */
-        {
-          checkkeys (p);
-          if (net)
-            checknet (p, net - 1);
-          dostuff (p);
+		while ((p[0].l > 0) && (p[1].l > 0)) {	/* main loop */ 
+			unsigned int now;
+			struct Tasks *t;
+			
+			now = him_getnow();	/* returns time in ms */
+			
+			t = tsk;
+			
+			while ((t != NULL) && (t->ms != 0)) {
+				if (t->last + t->ms <= now) {
+					t->func ();
+					t->last = now;
+				}
+				t++;
+			}
+			
+			checkkeys ();
+			checknet ();
+			
           showebar (p[0].e, p[1].e);
           him_repaint ();
         }  
@@ -254,8 +253,7 @@
       else
         printf ("\nplayer 0 wins!\n");
   
-      if (cmps.s != NULL)
-        {
+		if (cmps.s != NULL) {
           if (cmps.s[0] != NULL)
             free (cmps.s[0]);
           if (cmps.s[1] != NULL)
@@ -265,22 +263,21 @@
           free (cmps.s);
           cmps.p = -1;
         }
+		
       water_destroy ();
       bns_destroy ();
-      while ((shoo = freeso (shoo)) != NULL);
-      while (expb != NULL)
-        {
-          struct expl *ex;
-          ex = expb;
-          expb = expb->nxt;
-          free (ex);
-        }
+		
+		while ((shoo = freeso (shoo)) != NULL)
+			;
+		
+		expl_free ();
       free (c);
     }
-    
   letters_destroy ();   /* free font */
   him_destroy ();       /* free graphics */
 
   exit (0);   /* die */
 }
 
@@ -384,10 +382,10 @@
   y2 = (getwl (x2) ? min(lmhs[x2] - 8, getwl (x2)) : (lmhs[x2] - 8));
 
   if ((ox1 != ~0) && ((ox1 != x1) || (oy1 != y1)))
-    him_box (ox1 - 16, oy1 - 16, ox1 + 16, oy1 + 16, -1, 5);  
+    him_box (ox1 - 32, oy1 - 32, ox1 + 32, oy1 + 32, -1, 5);  
 
   if ((ox2 != ~0) && ((ox2 != x2) || (oy2 != y2)))
-    him_box (ox2 - 16, oy2 - 16, ox2 + 16, oy2 + 16, -1, 5);  
+    him_box (ox2 - 32, oy2 - 32, ox2 + 32, oy2 + 32, -1, 5);  
   
   if (oa1 != a1)
     {
@@ -403,8 +401,8 @@
   
   if ((ox1 != x1) || (oy1 != y1))
     {  
-      him_ufullcircle (x1, y1, 8, opt_col_p1, 5, &him_pixel);
       him_ufullcircle (x1, y1, 8, -1, 1, &px_hole);
+      him_ufullcircle (x1, y1, 8, opt_col_p1, 5, &him_pixel);
       him_line (x1 + (cos (a1 * PI / 128) * 8), y1 - (sin (a1 * PI / 128) * 8), x1 + (cos (a1 * PI / 128) * 16), y1 - (sin (a1 * PI / 128) * 16), opt_col_p1, 5);
     }
 
@@ -432,12 +430,12 @@
   if ((ox1 != ~0) && (ox1 != x1))
     wrtltrzoom (ox1, 0, 0x1f, 2, -1, -1, 7);
   if (ox1 != x1)
-    wrtltrzoom (x1, 0, 0x1f, 2, 15, -1, 7);
+    wrtltrzoom (x1, 0, 0x1f, 2, opt_col_p1, -1, 7);
 
   if ((ox2 != ~0) && (ox2 != x2))
     wrtltrzoom (ox2, 0, 0x1f, 2, -1, -1, 7);
   if (ox2 != x2)
-    wrtltrzoom (x2, 0, 0x1f, 2, 15, -1, 7);
+    wrtltrzoom (x2, 0, 0x1f, 2, opt_col_p2, -1, 7);
 
   ox1 = x1;
   ox2 = x2;
@@ -450,160 +448,66 @@
 {
   char s[64];
   sprintf (s, "p0: angle = %3d, force = %3d, lives = %d", p[0].a, p[0].p, p[0].l);
-  wrtwrd (0, 448, s, 0, 15, 7);
+  wrtwrd (0, 448, s, 0, opt_col_p1, 7);
   sprintf (s, "p1: angle = %3d, force = %3d, lives = %d", p[1].a, p[1].p, p[1].l);
-  wrtwrd (0, 464, s, 0, 15, 7);
+  wrtwrd (0, 464, s, 0, opt_col_p2, 7);
 }
 
 
 void
-checkkeys (p)
-    struct playa *p;
+checkkeys (void)
 {
   int n = 0;
   static int ps = 0, pe = 0;
  
   him_keyupd (); 
   
-  if (him_keypr (SCANCODE_GRAVE))
-    {}
- 
-  if (menu_p0 == 0)
-    {
-      if (him_keypr (SCANCODE_Q))
+  if (menu_p0 == 0)	/* p0 : rfdgTAB */
         {
-          p[0].a = (p[0].a + 1) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_R))
-       {
-          p[0].a = (p[0].a + 255) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_E))
-        {
-          p[0].p = (p[0].p + 1) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_W))
-        {
-          p[0].p = (p[0].p + 255) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_A))
+      if (him_keypr (SCANCODE_D))
         {
           p[0].a = (p[0].a + 4) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_F))
+      if (him_keypr (SCANCODE_G))
        {
           p[0].a = (p[0].a + 252) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_D))
+      if (him_keypr (SCANCODE_R))
         {
           p[0].p = (p[0].p + 4) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_S))
+      if (him_keypr (SCANCODE_F))
         {
           p[0].p = (p[0].p + 252) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_Z))
-        {
-          p[0].a = (p[0].a + 16) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_V))
-       {
-          p[0].a = (p[0].a + 240) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_C))
-        {
-          p[0].p = (p[0].p + 16) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_X))
-        {
-          p[0].p = (p[0].p + 240) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_T))
-        {
-          p[0].a = (128 - p[0].a);
-          n++;
-        }
     }
   
-  if (menu_p1 == 0)
+  if (menu_p1 == 0)	/* p1 ^v<>0 */
     {
-      if (him_keypr (SCANCODE_U))
-        {
-          p[1].a = (p[1].a + 1) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_P))
-       {
-          p[1].a = (p[1].a + 255) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_O))
-        {
-          p[1].p = (p[1].p + 1) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_I))
-        {
-          p[1].p = (p[1].p + 255) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_H))
+      if (him_keypr (SCANCODE_CURSORBLOCKLEFT))
         {
           p[1].a = (p[1].a + 4) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_L))
+      if (him_keypr (SCANCODE_CURSORBLOCKRIGHT))
        {
           p[1].a = (p[1].a + 252) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_K))
+      if (him_keypr (SCANCODE_CURSORBLOCKUP))
         {
           p[1].p = (p[1].p + 4) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_J))
+      if (him_keypr (SCANCODE_CURSORBLOCKDOWN))
         {
           p[1].p = (p[1].p + 252) % 256;
           n++;
         }
-      if (him_keypr (SCANCODE_B))
-        {
-          p[1].a = (p[1].a + 16) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_COMMA))
-        {
-          p[1].a = (p[1].a + 240) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_M))
-        {
-          p[1].p = (p[1].p + 16) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_N))
-        {
-          p[1].p = (p[1].p + 240) % 256;
-          n++;
-        }
-      if (him_keypr (SCANCODE_Y))
-        {
-          p[1].a = (128 - p[1].a);
-          n++;
-        }
     }
       
   if (n)
@@ -615,35 +519,26 @@
   if (him_keypr (SCANCODE_ESCAPE))
     p[0].l = p[1].l = 0;
 
-  if ((menu_p1 == 0) && (him_keypr (SCANCODE_ENTER)))
+  if ((menu_p1 == 0) && (him_keypr (SCANCODE_KEYPAD0)))
     pe++;
   else
     pe = 0;
 
-  if ((menu_p0 == 0) && (him_keypr (SCANCODE_SPACE)))
+  if ((menu_p0 == 0) && (him_keypr (SCANCODE_TAB)))
     ps++;
   else
     ps = 0;
         
   if (pe == 1)
-    {
-      fire (p, 1);
-      if (menu_p0 > 1)
-        compfir (p, 0);
-    }
+      fire (1);
  
   if (ps == 1)
-    {
-      fire (p, 0);
-      if (menu_p1 > 1)
-        compfir (p, 1);
-    }
+      fire (0);
 }
 
 
 struct shootp *
-fire (p, n)
-    struct playa *p;
+fire (n)
     int n;
 {
   float vx, vy, bx, by;  
@@ -677,7 +572,8 @@
   foo->who = n;
   foo->compid = -1;
 
-  return (shoo = foo);
+  {
+return (shoo = foo);}
 }
 
 
@@ -687,35 +583,13 @@
 	int perc, percr;
 	perc = d / 15;
 	percr = rand () % 100;
-	return (percr < perc);
-}
-
-
-void
-dostuff (p)
-   struct playa *p;
 {
-	unsigned int now;
-	struct Tasks *t;
-	
-	now = him_getnow();	/* returns time in ms */
-	
-	t = tsk;
-	
-	while ((t != NULL) && (t->ms != 0)) {
-		if (t->last + t->ms <= now) {
-			t->func (p);
-			t->last = now;
-		}
-		t++;
-	}
-	
+return (percr < perc);}
 }	
 
 
 void
-do_we (p)
-   struct playa *p;
+do_we (void)
 {
   p[0].e += opt_rwe;
   p[0].e = (p[0].e > opt_mwe) ? opt_mwe : p[0].e;
@@ -725,8 +599,7 @@
 
 	
 void
-do_fire (p)
-   struct playa *p;
+do_fire (void)
 {
   struct shootp *hsoo;
 
@@ -904,53 +777,7 @@
 
 
 void
-do_expl (p)
-   struct playa *p;
-{
-  struct expl *exxp;
-
-  /* explosion */
-  exxp = expb;
-  while ((exxp != NULL) && (expb != NULL))
-    {
-      exxp->c += (((float) exxp->p) / 128.0);
-      him_ufullcircler (exxp->x, exxp->y, (int) exxp->d, (int) exxp->c, -1, 1, &px_hole);
-
-      exxp->d = exxp->c;
-
-      if ((exxp->c) >= ((float) exxp->p))
-        {
-          struct expl *exxxp;
- 
-          if ((abs (exxp->x - p[0].x) < 24) || (abs (exxp->x - p[1].x) < 24))
-            {
-              paint_tanx (p[0].x, p[0].a, p[1].x, p[1].a);
-              show_arrows (p[0].x, p[1].x);
-              showscore (p);
-            }
-
-          if (exxp->pre != NULL)
-            exxp->pre->nxt = exxp->nxt;
-          
-          if (exxp->nxt != NULL)
-            exxp->nxt->pre = exxp->pre;
-            
-          if (exxp == expb)
-            expb = expb->nxt;
-          
-          exxxp = exxp->nxt;
-          free (exxp);
-          exxp = exxxp;
-        }
-      else
-        exxp = exxp->nxt;
-    } /* end of explosion */
-}  
-
-
-void
-do_light (p)
-   struct playa *p;
+do_light (void)
 {
   struct lghtt *lt;
 
@@ -1229,37 +1062,6 @@
 }
 
 
-void
-addexplpnt (x, y, p)
-     int x, y, p;
-{
-  struct expl *a;
-
-  if (x >= SCR_X)
-    x = SCR_X - 1;
-  if (x < 0)
-    x = 0;
-  if (y >= SCR_Y)
-    y = SCR_Y - 1;
-  if (y < 0)
-    y = 0;
-    
-  a = (struct expl *) malloc (sizeof (struct expl));  
-  if (a == NULL)
-    return;
-
-  a->nxt = expb;
-  if (expb != NULL)
-    expb->pre = a;
-  a->pre = NULL;
-  a->x = x;
-  a->y = y;
-  a->p = p;
-  a->d = a->c = 0.0;
-  expb = a;
-}
-
-
 int
 bezier (x, p, px, py, t)
     int x, p, t;  /* x = 0..t; p = 1..MAXINT (num points) */
@@ -1514,8 +1327,7 @@
 
 
 void
-compfir (p, pl)
-    struct playa *p;
+compfir (pl)
     int pl;
 {
   struct compsht *nw;
@@ -1549,7 +1362,7 @@
   cmps.s[1] = cmps.s[0];
   cmps.s[0] = nw;
 
-  fire (p, pl);
+  fire (pl);
   shoo->compid = id++;
 }
 
@@ -1569,9 +1382,7 @@
 
 
 void
-checknet (p, pl)
-    struct playa *p;
-    int pl;
+checknet (void)
 {
   /* TODO all */
 }
@@ -1592,23 +1403,57 @@
 		}
 		y = (rand () % 384) + 64;
 		
-		him_box (SCR_X - w - new, y, SCR_X - 1 - w, SCR_Y - 1, opt_col_land, 1);
-		/* TODO windows */
-		for (foo = SCR_X - w - new; foo <= SCR_X - 1 - w; foo++)
+#define X1 (SCR_X - w - new)
+#define Y1 (y)
+#define X2 (SCR_X - 1 - w)
+#define Y2 (SCR_Y - 1)
+
+		him_box (X1, Y1, X2, Y2, opt_col_land, 1);	/* building */
+
+
+		/* paint windows */ {
+
+#define BW (new)
+#define BH (SCR_Y - y)
+
+			int x, a, b;	/* window width, a, b */
+			
+			/* BW / x must be at least 5px */
+			for (; x = (rand() % 7) + 2, x > BW / 5 ;)
+				;
+
+			for (b = Y1; b < Y2; b += BW / x)
+				for (a = 0; a < BW / 2; a += BW / x) {
+					him_box (X1 + a + 3,
+						 b + 3,
+						 X1 + a + BW / x - 3,
+						 b + BW / x - 3,
+						 opt_col_wtr, 1);
+					him_box (X2 - a - BW / x + 3,
+						 b + 3,
+						 X2 - a - 3,
+						 b + BW / x - 3,
+						 opt_col_wtr, 1);
+				}
+		} /* end windows */
+	
+		for (foo = X1; foo <= X2; foo++)	/* land levels */
 			lmhs[foo] = y;
 	}
 }
 
-void showebar (int p0, int p1)
+
+void
+showebar (int p0, int p1)
 {
 	static int a = 0, b = 0;
 	if (p0 != a) {
-		him_box (SCR_X - 1 - (p0 * 128 / opt_mwe), SCR_Y - 32, SCR_X - 1,                        SCR_Y - 17, 15, 7);
+		him_box (SCR_X - 1 - (p0 * 128 / opt_mwe), SCR_Y - 32, SCR_X - 1,                        SCR_Y - 17, opt_col_p1, 7);
 		him_box (SCR_X - 128,                      SCR_Y - 32, SCR_X - 2 - (p0 * 128 / opt_mwe), SCR_Y - 17, -1, 7);
 		a = p0;
 	}
 	if (p1 != b) {
-		him_box (SCR_X - 1 - (p1 * 128 / opt_mwe), SCR_Y - 16, SCR_X - 1,                        SCR_Y - 1, 15, 7);
+		him_box (SCR_X - 1 - (p1 * 128 / opt_mwe), SCR_Y - 16, SCR_X - 1,                        SCR_Y - 1, opt_col_p2, 7);
 		him_box (SCR_X - 128,                      SCR_Y - 16, SCR_X - 2 - (p1 * 128 / opt_mwe), SCR_Y - 1, -1, 7);
 		b = p1;
 	}
